import org.gradle.internal.os.OperatingSystem

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.41"
}

// this is for LWJGL
project.ext.lwjglVersion = "3.1.6"

switch ( OperatingSystem.current() ) {
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
	break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
}
 /////

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'application'
//apply plugin: 'kotlin'
apply plugin: 'eclipse'

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/java'
   // main.java.srcDirs += 'src/main/myJava'
}


/*
distributions {
    main {
        contents {
            //from { 'res' }
            from '.'
        	include 'conf/*'
        }
    }
}
*/

distZip {
    into(project.name) {
        from '.'
        include 'res/*'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    /*
    // LWJGL stuff
    compile "org.lwjgl:lwjgl:$lwjglVersion"
	compile "org.lwjgl:lwjgl-assimp:$lwjglVersion"
	compile "org.lwjgl:lwjgl-bgfx:$lwjglVersion"
	compile "org.lwjgl:lwjgl-glfw:$lwjglVersion"
	compile "org.lwjgl:lwjgl-nanovg:$lwjglVersion"
	compile "org.lwjgl:lwjgl-nuklear:$lwjglVersion"
	compile "org.lwjgl:lwjgl-openal:$lwjglVersion"
	compile "org.lwjgl:lwjgl-opengl:$lwjglVersion"
	compile "org.lwjgl:lwjgl-par:$lwjglVersion"
	compile "org.lwjgl:lwjgl-stb:$lwjglVersion"
	compile "org.lwjgl:lwjgl-vulkan:$lwjglVersion"
	compile "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-assimp:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-bgfx:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-nanovg:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-nuklear:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-par:$lwjglVersion:$lwjglNatives"
	compile "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
	*/
	compile 'com.fazecast:jSerialComm:2.0.2'
	
	compile 'com.github.kotlin-graphics:imgui:v1.60wip-beta-01'
	
	
	// Look up which modules and versions of LWJGL are required and add setup the approriate natives.
    configurations.compile.resolvedConfiguration.getResolvedArtifacts().forEach {
        if (it.moduleVersion.id.group == "org.lwjgl") {
            runtime "org.lwjgl:${it.moduleVersion.id.name}:${it.moduleVersion.id.version}:${lwjglNatives}"
        }
    }
    
    runtime files('res/')
}





mainClassName = 'com.fmsz.gridmapgl.core.Main2'  // Main class with main method
